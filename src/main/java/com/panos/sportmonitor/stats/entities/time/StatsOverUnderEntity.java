package com.panos.sportmonitor.stats.entities.time;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.panos.sportmonitor.stats.BaseEntity;
import com.panos.sportmonitor.stats.BaseTimeEntity;

public abstract class StatsOverUnderEntity extends BaseTimeEntity {
    private Integer matches;
    private Double goalsscoredFtAverage;
    private Integer goalsscoredFtTotal;
    private Integer goalsscoredFtMatches;
    private Double goalsscoredP1Average;
    private Integer goalsscoredP1Total;
    private Integer goalsscoredP1Matches;
    private Double goalsscoredP2Average;
    private Integer goalsscoredP2Total;
    private Integer goalsscoredP2Matches;
    private Double concededFtAverage;
    private Integer concededFtTotal;
    private Integer concededFtMatches;
    private Double concededP1Average;
    private Integer concededP1Total;
    private Integer concededP1Matches;
    private Double concededP2Average;
    private Integer concededP2Total;
    private Integer concededP2Matches;
    private Integer ft05Totalover;
    private Integer ft05Over;
    private Integer ft05Under;
    private Integer ft15Totalover;
    private Integer ft15Over;
    private Integer ft15Under;
    private Integer ft25Totalover;
    private Integer ft25Over;
    private Integer ft25Under;
    private Integer ft35Totalover;
    private Integer ft35Over;
    private Integer ft35Under;
    private Integer ft45Totalover;
    private Integer ft45Over;
    private Integer ft45Under;
    private Integer ft55Totalover;
    private Integer ft55Over;
    private Integer ft55Under;
    private Integer p105Totalover;
    private Integer p105Over;
    private Integer p105Under;
    private Integer p115Totalover;
    private Integer p115Over;
    private Integer p115Under;
    private Integer p125Totalover;
    private Integer p125Over;
    private Integer p125Under;
    private Integer p135Totalover;
    private Integer p135Over;
    private Integer p135Under;
    private Integer p145Totalover;
    private Integer p145Over;
    private Integer p145Under;
    private Integer p155Totalover;
    private Integer p155Over;
    private Integer p155Under;
    private Integer p205Totalover;
    private Integer p205Over;
    private Integer p205Under;
    private Integer p215Totalover;
    private Integer p215Over;
    private Integer p215Under;
    private Integer p225Totalover;
    private Integer p225Over;
    private Integer p225Under;
    private Integer p235Totalover;
    private Integer p235Over;
    private Integer p235Under;
    private Integer p245Totalover;
    private Integer p245Over;
    private Integer p245Under;
    private Integer p255Totalover;
    private Integer p255Over;
    private Integer p255Under;

    public StatsOverUnderEntity(BaseEntity parent, long id, long timeStamp) {
        super(parent, id, timeStamp);
    }

    @Override
    protected boolean handleProperty(String nodeName, JsonNodeType nodeType, JsonNode node) {
        switch(nodeName) {
            case "matches": this.matches = node.asInt(); break;
            case "goalsscored.ft.average": this.goalsscoredFtAverage = node.asDouble(); break;
            case "goalsscored.ft.total": this.goalsscoredFtTotal = node.asInt(); break;
            case "goalsscored.ft.matches": this.goalsscoredFtMatches = node.asInt(); break;
            case "goalsscored.p1.average": this.goalsscoredP1Average = node.asDouble(); break;
            case "goalsscored.p1.total": this.goalsscoredP1Total = node.asInt(); break;
            case "goalsscored.p1.matches": this.goalsscoredP1Matches = node.asInt(); break;
            case "goalsscored.p2.average": this.goalsscoredP2Average = node.asDouble(); break;
            case "goalsscored.p2.total": this.goalsscoredP2Total = node.asInt(); break;
            case "goalsscored.p2.matches": this.goalsscoredP2Matches = node.asInt(); break;
            case "conceded.ft.average": this.concededFtAverage = node.asDouble(); break;
            case "conceded.ft.total": this.concededFtTotal = node.asInt(); break;
            case "conceded.ft.matches": this.concededFtMatches = node.asInt(); break;
            case "conceded.p1.average": this.concededP1Average = node.asDouble(); break;
            case "conceded.p1.total": this.concededP1Total = node.asInt(); break;
            case "conceded.p1.matches": this.concededP1Matches = node.asInt(); break;
            case "conceded.p2.average": this.concededP2Average = node.asDouble(); break;
            case "conceded.p2.total": this.concededP2Total = node.asInt(); break;
            case "conceded.p2.matches": this.concededP2Matches = node.asInt(); break;
            case "ft.0.5.totalover": this.ft05Totalover = node.asInt(); break;
            case "ft.0.5.over": this.ft05Over = node.asInt(); break;
            case "ft.0.5.under": this.ft05Under = node.asInt(); break;
            case "ft.1.5.totalover": this.ft15Totalover = node.asInt(); break;
            case "ft.1.5.over": this.ft15Over = node.asInt(); break;
            case "ft.1.5.under": this.ft15Under = node.asInt(); break;
            case "ft.2.5.totalover": this.ft25Totalover = node.asInt(); break;
            case "ft.2.5.over": this.ft25Over = node.asInt(); break;
            case "ft.2.5.under": this.ft25Under = node.asInt(); break;
            case "ft.3.5.totalover": this.ft35Totalover = node.asInt(); break;
            case "ft.3.5.over": this.ft35Over = node.asInt(); break;
            case "ft.3.5.under": this.ft35Under = node.asInt(); break;
            case "ft.4.5.totalover": this.ft45Totalover = node.asInt(); break;
            case "ft.4.5.over": this.ft45Over = node.asInt(); break;
            case "ft.4.5.under": this.ft45Under = node.asInt(); break;
            case "ft.5.5.totalover": this.ft55Totalover = node.asInt(); break;
            case "ft.5.5.over": this.ft55Over = node.asInt(); break;
            case "ft.5.5.under": this.ft55Under = node.asInt(); break;
            case "p1.0.5.totalover": this.p105Totalover = node.asInt(); break;
            case "p1.0.5.over": this.p105Over = node.asInt(); break;
            case "p1.0.5.under": this.p105Under = node.asInt(); break;
            case "p1.1.5.totalover": this.p115Totalover = node.asInt(); break;
            case "p1.1.5.over": this.p115Over = node.asInt(); break;
            case "p1.1.5.under": this.p115Under = node.asInt(); break;
            case "p1.2.5.totalover": this.p125Totalover = node.asInt(); break;
            case "p1.2.5.over": this.p125Over = node.asInt(); break;
            case "p1.2.5.under": this.p125Under = node.asInt(); break;
            case "p1.3.5.totalover": this.p135Totalover = node.asInt(); break;
            case "p1.3.5.over": this.p135Over = node.asInt(); break;
            case "p1.3.5.under": this.p135Under = node.asInt(); break;
            case "p1.4.5.totalover": this.p145Totalover = node.asInt(); break;
            case "p1.4.5.over": this.p145Over = node.asInt(); break;
            case "p1.4.5.under": this.p145Under = node.asInt(); break;
            case "p1.5.5.totalover": this.p155Totalover = node.asInt(); break;
            case "p1.5.5.over": this.p155Over = node.asInt(); break;
            case "p1.5.5.under": this.p155Under = node.asInt(); break;
            case "p2.0.5.totalover": this.p205Totalover = node.asInt(); break;
            case "p2.0.5.over": this.p205Over = node.asInt(); break;
            case "p2.0.5.under": this.p205Under = node.asInt(); break;
            case "p2.1.5.totalover": this.p215Totalover = node.asInt(); break;
            case "p2.1.5.over": this.p215Over = node.asInt(); break;
            case "p2.1.5.under": this.p215Under = node.asInt(); break;
            case "p2.2.5.totalover": this.p225Totalover = node.asInt(); break;
            case "p2.2.5.over": this.p225Over = node.asInt(); break;
            case "p2.2.5.under": this.p225Under = node.asInt(); break;
            case "p2.3.5.totalover": this.p235Totalover = node.asInt(); break;
            case "p2.3.5.over": this.p235Over = node.asInt(); break;
            case "p2.3.5.under": this.p235Under = node.asInt(); break;
            case "p2.4.5.totalover": this.p245Totalover = node.asInt(); break;
            case "p2.4.5.over": this.p245Over = node.asInt(); break;
            case "p2.4.5.under": this.p245Under = node.asInt(); break;
            case "p2.5.5.totalover": this.p255Totalover = node.asInt(); break;
            case "p2.5.5.over": this.p255Over = node.asInt(); break;
            case "p2.5.5.under": this.p255Under = node.asInt(); break;
            default: super.handleProperty(nodeName, nodeType, node);
        }
        return true;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append("id=").append(getId());
        sb.append(", timeStamp=").append(getTimeStamp());
        sb.append(", matches=").append(matches);
        sb.append(", goalsscoredFtAverage=").append(goalsscoredFtAverage);
        sb.append(", goalsscoredFtTotal=").append(goalsscoredFtTotal);
        sb.append(", goalsscoredFtMatches=").append(goalsscoredFtMatches);
        sb.append(", goalsscoredP1Average=").append(goalsscoredP1Average);
        sb.append(", goalsscoredP1Total=").append(goalsscoredP1Total);
        sb.append(", goalsscoredP1Matches=").append(goalsscoredP1Matches);
        sb.append(", goalsscoredP2Average=").append(goalsscoredP2Average);
        sb.append(", goalsscoredP2Total=").append(goalsscoredP2Total);
        sb.append(", goalsscoredP2Matches=").append(goalsscoredP2Matches);
        sb.append(", concededFtAverage=").append(concededFtAverage);
        sb.append(", concededFtTotal=").append(concededFtTotal);
        sb.append(", concededFtMatches=").append(concededFtMatches);
        sb.append(", concededP1Average=").append(concededP1Average);
        sb.append(", concededP1Total=").append(concededP1Total);
        sb.append(", concededP1Matches=").append(concededP1Matches);
        sb.append(", concededP2Average=").append(concededP2Average);
        sb.append(", concededP2Total=").append(concededP2Total);
        sb.append(", concededP2Matches=").append(concededP2Matches);
        sb.append(", ft05Totalover=").append(ft05Totalover);
        sb.append(", ft05Over=").append(ft05Over);
        sb.append(", ft05Under=").append(ft05Under);
        sb.append(", ft15Totalover=").append(ft15Totalover);
        sb.append(", ft15Over=").append(ft15Over);
        sb.append(", ft15Under=").append(ft15Under);
        sb.append(", ft25Totalover=").append(ft25Totalover);
        sb.append(", ft25Over=").append(ft25Over);
        sb.append(", ft25Under=").append(ft25Under);
        sb.append(", ft35Totalover=").append(ft35Totalover);
        sb.append(", ft35Over=").append(ft35Over);
        sb.append(", ft35Under=").append(ft35Under);
        sb.append(", ft45Totalover=").append(ft45Totalover);
        sb.append(", ft45Over=").append(ft45Over);
        sb.append(", ft45Under=").append(ft45Under);
        sb.append(", ft55Totalover=").append(ft55Totalover);
        sb.append(", ft55Over=").append(ft55Over);
        sb.append(", ft55Under=").append(ft55Under);
        sb.append(", p105Totalover=").append(p105Totalover);
        sb.append(", p105Over=").append(p105Over);
        sb.append(", p105Under=").append(p105Under);
        sb.append(", p115Totalover=").append(p115Totalover);
        sb.append(", p115Over=").append(p115Over);
        sb.append(", p115Under=").append(p115Under);
        sb.append(", p125Totalover=").append(p125Totalover);
        sb.append(", p125Over=").append(p125Over);
        sb.append(", p125Under=").append(p125Under);
        sb.append(", p135Totalover=").append(p135Totalover);
        sb.append(", p135Over=").append(p135Over);
        sb.append(", p135Under=").append(p135Under);
        sb.append(", p145Totalover=").append(p145Totalover);
        sb.append(", p145Over=").append(p145Over);
        sb.append(", p145Under=").append(p145Under);
        sb.append(", p155Totalover=").append(p155Totalover);
        sb.append(", p155Over=").append(p155Over);
        sb.append(", p155Under=").append(p155Under);
        sb.append(", p205Totalover=").append(p205Totalover);
        sb.append(", p205Over=").append(p205Over);
        sb.append(", p205Under=").append(p205Under);
        sb.append(", p215Totalover=").append(p215Totalover);
        sb.append(", p215Over=").append(p215Over);
        sb.append(", p215Under=").append(p215Under);
        sb.append(", p225Totalover=").append(p225Totalover);
        sb.append(", p225Over=").append(p225Over);
        sb.append(", p225Under=").append(p225Under);
        sb.append(", p235Totalover=").append(p235Totalover);
        sb.append(", p235Over=").append(p235Over);
        sb.append(", p235Under=").append(p235Under);
        sb.append(", p245Totalover=").append(p245Totalover);
        sb.append(", p245Over=").append(p245Over);
        sb.append(", p245Under=").append(p245Under);
        sb.append(", p255Totalover=").append(p255Totalover);
        sb.append(", p255Over=").append(p255Over);
        sb.append(", p255Under=").append(p255Under);
        return sb.toString();
    }
}
