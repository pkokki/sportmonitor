package com.panos.sportmonitor.stats.entities;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.panos.sportmonitor.stats.BaseEntity;
import com.panos.sportmonitor.stats.EntityId;

public class UniqueTeamEntity extends BaseEntity {
    private String name;
    private String suffix;
    private String abbr;
    private String nickname;
    private String mediumName;
    private Boolean isCountry;
    private String founded;
    private String website;
    private String sex;
    private EntityId realCategoryId;
    private Long teamTypeId;
    private EntityId countryCodeId;
    private EntityId stadiumId;
    private EntityId homeRealCategoryId;

    private Integer statsMatches;
    private Integer statsHomeMatches;
    private Integer statsAwayMatches;
    private Integer statsScoredFTTotal;
    private Double statsScoredFTAverage;
    private Integer statsScoredFTAtleastonegoal;
    private Integer statsScoredFTMatches;
    private Integer statsScoredFThomeTotal;
    private Double statsScoredFThomeAverage;
    private Integer statsScoredFThomeAtleastonegoal;
    private Integer statsScoredFThomeMatches;
    private Integer statsScoredFTawayTotal;
    private Double statsScoredFTawayAverage;
    private Integer statsScoredFTawayAtleastonegoal;
    private Integer statsScoredFTawayMatches;
    private Integer statsScoredP1Total;
    private Double statsScoredP1Average;
    private Integer statsScoredP1Atleastonegoal;
    private Integer statsScoredP1Matches;
    private Integer statsScoredP1homeTotal;
    private Double statsScoredP1homeAverage;
    private Integer statsScoredP1homeAtleastonegoal;
    private Integer statsScoredP1homeMatches;
    private Integer statsScoredP1awayTotal;
    private Double statsScoredP1awayAverage;
    private Integer statsScoredP1awayAtleastonegoal;
    private Integer statsScoredP1awayMatches;
    private Integer statsScoredP2Total;
    private Double statsScoredP2Average;
    private Integer statsScoredP2Atleastonegoal;
    private Integer statsScoredP2Matches;
    private Integer statsScoredP2homeTotal;
    private Double statsScoredP2homeAverage;
    private Integer statsScoredP2homeAtleastonegoal;
    private Integer statsScoredP2homeMatches;
    private Integer statsScoredP2awayTotal;
    private Double statsScoredP2awayAverage;
    private Integer statsScoredP2awayAtleastonegoal;
    private Integer statsScoredP2awayMatches;
    private Integer statsConcededFtTotal;
    private Double statsConcededFtAverage;
    private Integer statsConcededFtCleansheets;
    private Integer statsConcededFtMatches;
    private Integer statsConcededFthomeTotal;
    private Double statsConcededFthomeAverage;
    private Integer statsConcededFthomeCleansheets;
    private Integer statsConcededFthomeMatches;
    private Integer statsConcededFtawayTotal;
    private Double statsConcededFtawayAverage;
    private Integer statsConcededFtawayCleansheets;
    private Integer statsConcededFtawayMatches;
    private Integer statsConcededP1Total;
    private Double statsConcededP1Average;
    private Integer statsConcededP1Cleansheets;
    private Integer statsConcededP1Matches;
    private Integer statsConcededP1homeTotal;
    private Double statsConcededP1homeAverage;
    private Integer statsConcededP1homeCleansheets;
    private Integer statsConcededP1homeMatches;
    private Integer statsConcededP1awayTotal;
    private Double statsConcededP1awayAverage;
    private Integer statsConcededP1awayCleansheets;
    private Integer statsConcededP1awayMatches;
    private Integer statsConcededP2Total;
    private Double statsConcededP2Average;
    private Integer statsConcededP2Cleansheets;
    private Integer statsConcededP2Matches;
    private Integer statsConcededP2homeTotal;
    private Double statsConcededP2homeAverage;
    private Integer statsConcededP2homeCleansheets;
    private Integer statsConcededP2homeMatches;
    private Integer statsConcededP2awayTotal;
    private Double statsConcededP2awayAverage;
    private Integer statsConcededP2awayCleansheets;
    private Integer statsConcededP2awayMatches;
    private Integer statsTotalFt05Over;
    private Integer statsTotalFt05Under;
    private Integer statsTotalFt15Over;
    private Integer statsTotalFt15Under;
    private Integer statsTotalFt25Over;
    private Integer statsTotalFt25Under;
    private Integer statsTotalFt35Over;
    private Integer statsTotalFt35Under;
    private Integer statsTotalFt45Over;
    private Integer statsTotalFt45Under;
    private Integer statsTotalFt55Over;
    private Integer statsTotalFt55Under;
    private Integer statsTotalP105Over;
    private Integer statsTotalP105Under;
    private Integer statsTotalP115Over;
    private Integer statsTotalP115Under;
    private Integer statsTotalP125Over;
    private Integer statsTotalP125Under;
    private Integer statsTotalP135Over;
    private Integer statsTotalP135Under;
    private Integer statsTotalP145Over;
    private Integer statsTotalP145Under;
    private Integer statsTotalP155Over;
    private Integer statsTotalP155Under;
    private Integer statsTotalP205Over;
    private Integer statsTotalP205Under;
    private Integer statsTotalP215Over;
    private Integer statsTotalP215Under;
    private Integer statsTotalP225Over;
    private Integer statsTotalP225Under;
    private Integer statsTotalP235Over;
    private Integer statsTotalP235Under;
    private Integer statsTotalP245Over;
    private Integer statsTotalP245Under;
    private Integer statsTotalP255Over;
    private Integer statsTotalP255Under;
    private Integer statsHomeFt05Over;
    private Integer statsHomeFt05Under;
    private Integer statsHomeFt15Over;
    private Integer statsHomeFt15Under;
    private Integer statsHomeFt25Over;
    private Integer statsHomeFt25Under;
    private Integer statsHomeFt35Over;
    private Integer statsHomeFt35Under;
    private Integer statsHomeFt45Over;
    private Integer statsHomeFt45Under;
    private Integer statsHomeFt55Over;
    private Integer statsHomeFt55Under;
    private Integer statsHomeP105Over;
    private Integer statsHomeP105Under;
    private Integer statsHomeP115Over;
    private Integer statsHomeP115Under;
    private Integer statsHomeP125Over;
    private Integer statsHomeP125Under;
    private Integer statsHomeP135Over;
    private Integer statsHomeP135Under;
    private Integer statsHomeP145Over;
    private Integer statsHomeP145Under;
    private Integer statsHomeP155Over;
    private Integer statsHomeP155Under;
    private Integer statsHomeP205Over;
    private Integer statsHomeP205Under;
    private Integer statsHomeP215Over;
    private Integer statsHomeP215Under;
    private Integer statsHomeP225Over;
    private Integer statsHomeP225Under;
    private Integer statsHomeP235Over;
    private Integer statsHomeP235Under;
    private Integer statsHomeP245Over;
    private Integer statsHomeP245Under;
    private Integer statsHomeP255Over;
    private Integer statsHomeP255Under;
    private Integer statsAwayFt05Over;
    private Integer statsAwayFt05Under;
    private Integer statsAwayFt15Over;
    private Integer statsAwayFt15Under;
    private Integer statsAwayFt25Over;
    private Integer statsAwayFt25Under;
    private Integer statsAwayFt35Over;
    private Integer statsAwayFt35Under;
    private Integer statsAwayFt45Over;
    private Integer statsAwayFt45Under;
    private Integer statsAwayFt55Over;
    private Integer statsAwayFt55Under;
    private Integer statsAwayP105Over;
    private Integer statsAwayP105Under;
    private Integer statsAwayP115Over;
    private Integer statsAwayP115Under;
    private Integer statsAwayP125Over;
    private Integer statsAwayP125Under;
    private Integer statsAwayP135Over;
    private Integer statsAwayP135Under;
    private Integer statsAwayP145Over;
    private Integer statsAwayP145Under;
    private Integer statsAwayP155Over;
    private Integer statsAwayP155Under;
    private Integer statsAwayP205Over;
    private Integer statsAwayP205Under;
    private Integer statsAwayP215Over;
    private Integer statsAwayP215Under;
    private Integer statsAwayP225Over;
    private Integer statsAwayP225Under;
    private Integer statsAwayP235Over;
    private Integer statsAwayP235Under;
    private Integer statsAwayP245Over;
    private Integer statsAwayP245Under;
    private Integer statsAwayP255Over;
    private Integer statsAwayP255Under;


    public UniqueTeamEntity(BaseEntity parent, long id) {
        super(parent, id);
    }

    @Override
    protected boolean handleChildEntity(String entityName, BaseEntity childEntity) {
        switch (entityName) {
            case "countrycode": this.countryCodeId = childEntity.getId(); return true;
            case "stadium": this.stadiumId = childEntity.getId(); return true;
            default:
                return super.handleChildEntity(entityName, childEntity);
        }
    }

    @Override
    protected boolean handleProperty(String nodeName, JsonNodeType nodeType, JsonNode node) {
        switch (nodeName) {
            case "_rcid": this.realCategoryId = new EntityId(node.asLong()); break;
            case "homerealcategoryid": this.homeRealCategoryId = new EntityId(node.asLong()); break;
            case "teamtypeid": this.teamTypeId = node.asLong(); break;
            case "name": this.name = node.asText(); break;
            case "suffix": this.suffix = node.asText(); break;
            case "abbr": this.abbr = node.asText(); break;
            case "nickname": this.nickname = node.asText(); break;
            case "mediumname": this.mediumName = node.asText(); break;
            case "iscountry": this.isCountry = node.asBoolean(); break;
            case "sex": this.sex = node.asText(); break;
            case "website": this.website = node.asText(); break;
            case "founded": this.founded = node.asText(); break;

            case "haslogo":
            case "virtual":
                break;
            default:
                if (nodeName.startsWith("stats.")) return handleStats(nodeName, nodeType, node);
                if (nodeName.startsWith("homejersey.")) return true;
                return super.handleProperty(nodeName, nodeType, node);
        }
        return true;
    }

    private Boolean handleStats(String nodeName, JsonNodeType nodeType, JsonNode node) {
        switch(nodeName) {
            case "stats.matches": this.statsMatches = node.asInt(); break;
            case "stats.homematches": this.statsHomeMatches = node.asInt(); break;
            case "stats.awaymatches": this.statsAwayMatches = node.asInt(); break;
            case "stats.goalsscored.ft.total": this.statsScoredFTTotal = node.asInt(); break;
            case "stats.goalsscored.ft.average": this.statsScoredFTAverage = node.asDouble(); break;
            case "stats.goalsscored.ft.atleastonegoal": this.statsScoredFTAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.ft.matches": this.statsScoredFTMatches = node.asInt(); break;
            case "stats.goalsscored.fthome.total": this.statsScoredFThomeTotal = node.asInt(); break;
            case "stats.goalsscored.fthome.average": this.statsScoredFThomeAverage = node.asDouble(); break;
            case "stats.goalsscored.fthome.atleastonegoal": this.statsScoredFThomeAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.fthome.matches": this.statsScoredFThomeMatches = node.asInt(); break;
            case "stats.goalsscored.ftaway.total": this.statsScoredFTawayTotal = node.asInt(); break;
            case "stats.goalsscored.ftaway.average": this.statsScoredFTawayAverage = node.asDouble(); break;
            case "stats.goalsscored.ftaway.atleastonegoal": this.statsScoredFTawayAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.ftaway.matches": this.statsScoredFTawayMatches = node.asInt(); break;
            case "stats.goalsscored.p1.total": this.statsScoredP1Total = node.asInt(); break;
            case "stats.goalsscored.p1.average": this.statsScoredP1Average = node.asDouble(); break;
            case "stats.goalsscored.p1.atleastonegoal": this.statsScoredP1Atleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p1.matches": this.statsScoredP1Matches = node.asInt(); break;
            case "stats.goalsscored.p1home.total": this.statsScoredP1homeTotal = node.asInt(); break;
            case "stats.goalsscored.p1home.average": this.statsScoredP1homeAverage = node.asDouble(); break;
            case "stats.goalsscored.p1home.atleastonegoal": this.statsScoredP1homeAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p1home.matches": this.statsScoredP1homeMatches = node.asInt(); break;
            case "stats.goalsscored.p1away.total": this.statsScoredP1awayTotal = node.asInt(); break;
            case "stats.goalsscored.p1away.average": this.statsScoredP1awayAverage = node.asDouble(); break;
            case "stats.goalsscored.p1away.atleastonegoal": this.statsScoredP1awayAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p1away.matches": this.statsScoredP1awayMatches = node.asInt(); break;
            case "stats.goalsscored.p2.total": this.statsScoredP2Total = node.asInt(); break;
            case "stats.goalsscored.p2.average": this.statsScoredP2Average = node.asDouble(); break;
            case "stats.goalsscored.p2.atleastonegoal": this.statsScoredP2Atleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p2.matches": this.statsScoredP2Matches = node.asInt(); break;
            case "stats.goalsscored.p2home.total": this.statsScoredP2homeTotal = node.asInt(); break;
            case "stats.goalsscored.p2home.average": this.statsScoredP2homeAverage = node.asDouble(); break;
            case "stats.goalsscored.p2home.atleastonegoal": this.statsScoredP2homeAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p2home.matches": this.statsScoredP2homeMatches = node.asInt(); break;
            case "stats.goalsscored.p2away.total": this.statsScoredP2awayTotal = node.asInt(); break;
            case "stats.goalsscored.p2away.average": this.statsScoredP2awayAverage = node.asDouble(); break;
            case "stats.goalsscored.p2away.atleastonegoal": this.statsScoredP2awayAtleastonegoal = node.asInt(); break;
            case "stats.goalsscored.p2away.matches": this.statsScoredP2awayMatches = node.asInt(); break;
            case "stats.conceded.ft.total": this.statsConcededFtTotal = node.asInt(); break;
            case "stats.conceded.ft.average": this.statsConcededFtAverage = node.asDouble(); break;
            case "stats.conceded.ft.cleansheets": this.statsConcededFtCleansheets = node.asInt(); break;
            case "stats.conceded.ft.matches": this.statsConcededFtMatches = node.asInt(); break;
            case "stats.conceded.fthome.total": this.statsConcededFthomeTotal = node.asInt(); break;
            case "stats.conceded.fthome.average": this.statsConcededFthomeAverage = node.asDouble(); break;
            case "stats.conceded.fthome.cleansheets": this.statsConcededFthomeCleansheets = node.asInt(); break;
            case "stats.conceded.fthome.matches": this.statsConcededFthomeMatches = node.asInt(); break;
            case "stats.conceded.ftaway.total": this.statsConcededFtawayTotal = node.asInt(); break;
            case "stats.conceded.ftaway.average": this.statsConcededFtawayAverage = node.asDouble(); break;
            case "stats.conceded.ftaway.cleansheets": this.statsConcededFtawayCleansheets = node.asInt(); break;
            case "stats.conceded.ftaway.matches": this.statsConcededFtawayMatches = node.asInt(); break;
            case "stats.conceded.p1.total": this.statsConcededP1Total = node.asInt(); break;
            case "stats.conceded.p1.average": this.statsConcededP1Average = node.asDouble(); break;
            case "stats.conceded.p1.cleansheets": this.statsConcededP1Cleansheets = node.asInt(); break;
            case "stats.conceded.p1.matches": this.statsConcededP1Matches = node.asInt(); break;
            case "stats.conceded.p1home.total": this.statsConcededP1homeTotal = node.asInt(); break;
            case "stats.conceded.p1home.average": this.statsConcededP1homeAverage = node.asDouble(); break;
            case "stats.conceded.p1home.cleansheets": this.statsConcededP1homeCleansheets = node.asInt(); break;
            case "stats.conceded.p1home.matches": this.statsConcededP1homeMatches = node.asInt(); break;
            case "stats.conceded.p1away.total": this.statsConcededP1awayTotal = node.asInt(); break;
            case "stats.conceded.p1away.average": this.statsConcededP1awayAverage = node.asDouble(); break;
            case "stats.conceded.p1away.cleansheets": this.statsConcededP1awayCleansheets = node.asInt(); break;
            case "stats.conceded.p1away.matches": this.statsConcededP1awayMatches = node.asInt(); break;
            case "stats.conceded.p2.total": this.statsConcededP2Total = node.asInt(); break;
            case "stats.conceded.p2.average": this.statsConcededP2Average = node.asDouble(); break;
            case "stats.conceded.p2.cleansheets": this.statsConcededP2Cleansheets = node.asInt(); break;
            case "stats.conceded.p2.matches": this.statsConcededP2Matches = node.asInt(); break;
            case "stats.conceded.p2home.total": this.statsConcededP2homeTotal = node.asInt(); break;
            case "stats.conceded.p2home.average": this.statsConcededP2homeAverage = node.asDouble(); break;
            case "stats.conceded.p2home.cleansheets": this.statsConcededP2homeCleansheets = node.asInt(); break;
            case "stats.conceded.p2home.matches": this.statsConcededP2homeMatches = node.asInt(); break;
            case "stats.conceded.p2away.total": this.statsConcededP2awayTotal = node.asInt(); break;
            case "stats.conceded.p2away.average": this.statsConcededP2awayAverage = node.asDouble(); break;
            case "stats.conceded.p2away.cleansheets": this.statsConcededP2awayCleansheets = node.asInt(); break;
            case "stats.conceded.p2away.matches": this.statsConcededP2awayMatches = node.asInt(); break;
            case "stats.total.ft.0.5.over": this.statsTotalFt05Over = node.asInt(); break;
            case "stats.total.ft.0.5.under": this.statsTotalFt05Under = node.asInt(); break;
            case "stats.total.ft.1.5.over": this.statsTotalFt15Over = node.asInt(); break;
            case "stats.total.ft.1.5.under": this.statsTotalFt15Under = node.asInt(); break;
            case "stats.total.ft.2.5.over": this.statsTotalFt25Over = node.asInt(); break;
            case "stats.total.ft.2.5.under": this.statsTotalFt25Under = node.asInt(); break;
            case "stats.total.ft.3.5.over": this.statsTotalFt35Over = node.asInt(); break;
            case "stats.total.ft.3.5.under": this.statsTotalFt35Under = node.asInt(); break;
            case "stats.total.ft.4.5.over": this.statsTotalFt45Over = node.asInt(); break;
            case "stats.total.ft.4.5.under": this.statsTotalFt45Under = node.asInt(); break;
            case "stats.total.ft.5.5.over": this.statsTotalFt55Over = node.asInt(); break;
            case "stats.total.ft.5.5.under": this.statsTotalFt55Under = node.asInt(); break;
            case "stats.total.p1.0.5.over": this.statsTotalP105Over = node.asInt(); break;
            case "stats.total.p1.0.5.under": this.statsTotalP105Under = node.asInt(); break;
            case "stats.total.p1.1.5.over": this.statsTotalP115Over = node.asInt(); break;
            case "stats.total.p1.1.5.under": this.statsTotalP115Under = node.asInt(); break;
            case "stats.total.p1.2.5.over": this.statsTotalP125Over = node.asInt(); break;
            case "stats.total.p1.2.5.under": this.statsTotalP125Under = node.asInt(); break;
            case "stats.total.p1.3.5.over": this.statsTotalP135Over = node.asInt(); break;
            case "stats.total.p1.3.5.under": this.statsTotalP135Under = node.asInt(); break;
            case "stats.total.p1.4.5.over": this.statsTotalP145Over = node.asInt(); break;
            case "stats.total.p1.4.5.under": this.statsTotalP145Under = node.asInt(); break;
            case "stats.total.p1.5.5.over": this.statsTotalP155Over = node.asInt(); break;
            case "stats.total.p1.5.5.under": this.statsTotalP155Under = node.asInt(); break;
            case "stats.total.p2.0.5.over": this.statsTotalP205Over = node.asInt(); break;
            case "stats.total.p2.0.5.under": this.statsTotalP205Under = node.asInt(); break;
            case "stats.total.p2.1.5.over": this.statsTotalP215Over = node.asInt(); break;
            case "stats.total.p2.1.5.under": this.statsTotalP215Under = node.asInt(); break;
            case "stats.total.p2.2.5.over": this.statsTotalP225Over = node.asInt(); break;
            case "stats.total.p2.2.5.under": this.statsTotalP225Under = node.asInt(); break;
            case "stats.total.p2.3.5.over": this.statsTotalP235Over = node.asInt(); break;
            case "stats.total.p2.3.5.under": this.statsTotalP235Under = node.asInt(); break;
            case "stats.total.p2.4.5.over": this.statsTotalP245Over = node.asInt(); break;
            case "stats.total.p2.4.5.under": this.statsTotalP245Under = node.asInt(); break;
            case "stats.total.p2.5.5.over": this.statsTotalP255Over = node.asInt(); break;
            case "stats.total.p2.5.5.under": this.statsTotalP255Under = node.asInt(); break;
            case "stats.home.ft.0.5.over": this.statsHomeFt05Over = node.asInt(); break;
            case "stats.home.ft.0.5.under": this.statsHomeFt05Under = node.asInt(); break;
            case "stats.home.ft.1.5.over": this.statsHomeFt15Over = node.asInt(); break;
            case "stats.home.ft.1.5.under": this.statsHomeFt15Under = node.asInt(); break;
            case "stats.home.ft.2.5.over": this.statsHomeFt25Over = node.asInt(); break;
            case "stats.home.ft.2.5.under": this.statsHomeFt25Under = node.asInt(); break;
            case "stats.home.ft.3.5.over": this.statsHomeFt35Over = node.asInt(); break;
            case "stats.home.ft.3.5.under": this.statsHomeFt35Under = node.asInt(); break;
            case "stats.home.ft.4.5.over": this.statsHomeFt45Over = node.asInt(); break;
            case "stats.home.ft.4.5.under": this.statsHomeFt45Under = node.asInt(); break;
            case "stats.home.ft.5.5.over": this.statsHomeFt55Over = node.asInt(); break;
            case "stats.home.ft.5.5.under": this.statsHomeFt55Under = node.asInt(); break;
            case "stats.home.p1.0.5.over": this.statsHomeP105Over = node.asInt(); break;
            case "stats.home.p1.0.5.under": this.statsHomeP105Under = node.asInt(); break;
            case "stats.home.p1.1.5.over": this.statsHomeP115Over = node.asInt(); break;
            case "stats.home.p1.1.5.under": this.statsHomeP115Under = node.asInt(); break;
            case "stats.home.p1.2.5.over": this.statsHomeP125Over = node.asInt(); break;
            case "stats.home.p1.2.5.under": this.statsHomeP125Under = node.asInt(); break;
            case "stats.home.p1.3.5.over": this.statsHomeP135Over = node.asInt(); break;
            case "stats.home.p1.3.5.under": this.statsHomeP135Under = node.asInt(); break;
            case "stats.home.p1.4.5.over": this.statsHomeP145Over = node.asInt(); break;
            case "stats.home.p1.4.5.under": this.statsHomeP145Under = node.asInt(); break;
            case "stats.home.p1.5.5.over": this.statsHomeP155Over = node.asInt(); break;
            case "stats.home.p1.5.5.under": this.statsHomeP155Under = node.asInt(); break;
            case "stats.home.p2.0.5.over": this.statsHomeP205Over = node.asInt(); break;
            case "stats.home.p2.0.5.under": this.statsHomeP205Under = node.asInt(); break;
            case "stats.home.p2.1.5.over": this.statsHomeP215Over = node.asInt(); break;
            case "stats.home.p2.1.5.under": this.statsHomeP215Under = node.asInt(); break;
            case "stats.home.p2.2.5.over": this.statsHomeP225Over = node.asInt(); break;
            case "stats.home.p2.2.5.under": this.statsHomeP225Under = node.asInt(); break;
            case "stats.home.p2.3.5.over": this.statsHomeP235Over = node.asInt(); break;
            case "stats.home.p2.3.5.under": this.statsHomeP235Under = node.asInt(); break;
            case "stats.home.p2.4.5.over": this.statsHomeP245Over = node.asInt(); break;
            case "stats.home.p2.4.5.under": this.statsHomeP245Under = node.asInt(); break;
            case "stats.home.p2.5.5.over": this.statsHomeP255Over = node.asInt(); break;
            case "stats.home.p2.5.5.under": this.statsHomeP255Under = node.asInt(); break;
            case "stats.away.ft.0.5.over": this.statsAwayFt05Over = node.asInt(); break;
            case "stats.away.ft.0.5.under": this.statsAwayFt05Under = node.asInt(); break;
            case "stats.away.ft.1.5.over": this.statsAwayFt15Over = node.asInt(); break;
            case "stats.away.ft.1.5.under": this.statsAwayFt15Under = node.asInt(); break;
            case "stats.away.ft.2.5.over": this.statsAwayFt25Over = node.asInt(); break;
            case "stats.away.ft.2.5.under": this.statsAwayFt25Under = node.asInt(); break;
            case "stats.away.ft.3.5.over": this.statsAwayFt35Over = node.asInt(); break;
            case "stats.away.ft.3.5.under": this.statsAwayFt35Under = node.asInt(); break;
            case "stats.away.ft.4.5.over": this.statsAwayFt45Over = node.asInt(); break;
            case "stats.away.ft.4.5.under": this.statsAwayFt45Under = node.asInt(); break;
            case "stats.away.ft.5.5.over": this.statsAwayFt55Over = node.asInt(); break;
            case "stats.away.ft.5.5.under": this.statsAwayFt55Under = node.asInt(); break;
            case "stats.away.p1.0.5.over": this.statsAwayP105Over = node.asInt(); break;
            case "stats.away.p1.0.5.under": this.statsAwayP105Under = node.asInt(); break;
            case "stats.away.p1.1.5.over": this.statsAwayP115Over = node.asInt(); break;
            case "stats.away.p1.1.5.under": this.statsAwayP115Under = node.asInt(); break;
            case "stats.away.p1.2.5.over": this.statsAwayP125Over = node.asInt(); break;
            case "stats.away.p1.2.5.under": this.statsAwayP125Under = node.asInt(); break;
            case "stats.away.p1.3.5.over": this.statsAwayP135Over = node.asInt(); break;
            case "stats.away.p1.3.5.under": this.statsAwayP135Under = node.asInt(); break;
            case "stats.away.p1.4.5.over": this.statsAwayP145Over = node.asInt(); break;
            case "stats.away.p1.4.5.under": this.statsAwayP145Under = node.asInt(); break;
            case "stats.away.p1.5.5.over": this.statsAwayP155Over = node.asInt(); break;
            case "stats.away.p1.5.5.under": this.statsAwayP155Under = node.asInt(); break;
            case "stats.away.p2.0.5.over": this.statsAwayP205Over = node.asInt(); break;
            case "stats.away.p2.0.5.under": this.statsAwayP205Under = node.asInt(); break;
            case "stats.away.p2.1.5.over": this.statsAwayP215Over = node.asInt(); break;
            case "stats.away.p2.1.5.under": this.statsAwayP215Under = node.asInt(); break;
            case "stats.away.p2.2.5.over": this.statsAwayP225Over = node.asInt(); break;
            case "stats.away.p2.2.5.under": this.statsAwayP225Under = node.asInt(); break;
            case "stats.away.p2.3.5.over": this.statsAwayP235Over = node.asInt(); break;
            case "stats.away.p2.3.5.under": this.statsAwayP235Under = node.asInt(); break;
            case "stats.away.p2.4.5.over": this.statsAwayP245Over = node.asInt(); break;
            case "stats.away.p2.4.5.under": this.statsAwayP245Under = node.asInt(); break;
            case "stats.away.p2.5.5.over": this.statsAwayP255Over = node.asInt(); break;
            case "stats.away.p2.5.5.under": this.statsAwayP255Under = node.asInt(); break;
            default: return super.handleProperty(nodeName, nodeType, node);
        }
        return true;
    }


    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("UniqueTeamEntity{");
        sb.append("id=").append(getId());
        sb.append(", name='").append(name).append('\'');
        sb.append(", suffix='").append(suffix).append('\'');
        sb.append(", abbr='").append(abbr).append('\'');
        sb.append(", nickname='").append(nickname).append('\'');
        sb.append(", mediumName='").append(mediumName).append('\'');
        sb.append(", isCountry=").append(isCountry);
        sb.append(", founded='").append(founded).append('\'');
        sb.append(", website='").append(website).append('\'');
        sb.append(", sex='").append(sex).append('\'');
        sb.append(", realCategoryId=").append(realCategoryId);
        sb.append(", teamTypeId=").append(teamTypeId);
        sb.append(", countryCodeId=").append(countryCodeId);
        sb.append(", stadiumId=").append(stadiumId);
        sb.append(", homeRealCategoryId=").append(homeRealCategoryId);
        sb.append(", statsMatches=").append(statsMatches);
        sb.append(", statsHomeMatches=").append(statsHomeMatches);
        sb.append(", statsAwayMatches=").append(statsAwayMatches);
        sb.append(", statsScoredFTTotal=").append(statsScoredFTTotal);
        sb.append(", statsScoredFTAverage=").append(statsScoredFTAverage);
        sb.append(", statsScoredFTAtleastonegoal=").append(statsScoredFTAtleastonegoal);
        sb.append(", statsScoredFTMatches=").append(statsScoredFTMatches);
        sb.append(", statsScoredFThomeTotal=").append(statsScoredFThomeTotal);
        sb.append(", statsScoredFThomeAverage=").append(statsScoredFThomeAverage);
        sb.append(", statsScoredFThomeAtleastonegoal=").append(statsScoredFThomeAtleastonegoal);
        sb.append(", statsScoredFThomeMatches=").append(statsScoredFThomeMatches);
        sb.append(", statsScoredFTawayTotal=").append(statsScoredFTawayTotal);
        sb.append(", statsScoredFTawayAverage=").append(statsScoredFTawayAverage);
        sb.append(", statsScoredFTawayAtleastonegoal=").append(statsScoredFTawayAtleastonegoal);
        sb.append(", statsScoredFTawayMatches=").append(statsScoredFTawayMatches);
        sb.append(", statsScoredP1Total=").append(statsScoredP1Total);
        sb.append(", statsScoredP1Average=").append(statsScoredP1Average);
        sb.append(", statsScoredP1Atleastonegoal=").append(statsScoredP1Atleastonegoal);
        sb.append(", statsScoredP1Matches=").append(statsScoredP1Matches);
        sb.append(", statsScoredP1homeTotal=").append(statsScoredP1homeTotal);
        sb.append(", statsScoredP1homeAverage=").append(statsScoredP1homeAverage);
        sb.append(", statsScoredP1homeAtleastonegoal=").append(statsScoredP1homeAtleastonegoal);
        sb.append(", statsScoredP1homeMatches=").append(statsScoredP1homeMatches);
        sb.append(", statsScoredP1awayTotal=").append(statsScoredP1awayTotal);
        sb.append(", statsScoredP1awayAverage=").append(statsScoredP1awayAverage);
        sb.append(", statsScoredP1awayAtleastonegoal=").append(statsScoredP1awayAtleastonegoal);
        sb.append(", statsScoredP1awayMatches=").append(statsScoredP1awayMatches);
        sb.append(", statsScoredP2Total=").append(statsScoredP2Total);
        sb.append(", statsScoredP2Average=").append(statsScoredP2Average);
        sb.append(", statsScoredP2Atleastonegoal=").append(statsScoredP2Atleastonegoal);
        sb.append(", statsScoredP2Matches=").append(statsScoredP2Matches);
        sb.append(", statsScoredP2homeTotal=").append(statsScoredP2homeTotal);
        sb.append(", statsScoredP2homeAverage=").append(statsScoredP2homeAverage);
        sb.append(", statsScoredP2homeAtleastonegoal=").append(statsScoredP2homeAtleastonegoal);
        sb.append(", statsScoredP2homeMatches=").append(statsScoredP2homeMatches);
        sb.append(", statsScoredP2awayTotal=").append(statsScoredP2awayTotal);
        sb.append(", statsScoredP2awayAverage=").append(statsScoredP2awayAverage);
        sb.append(", statsScoredP2awayAtleastonegoal=").append(statsScoredP2awayAtleastonegoal);
        sb.append(", statsScoredP2awayMatches=").append(statsScoredP2awayMatches);
        sb.append(", statsConcededFtTotal=").append(statsConcededFtTotal);
        sb.append(", statsConcededFtAverage=").append(statsConcededFtAverage);
        sb.append(", statsConcededFtCleansheets=").append(statsConcededFtCleansheets);
        sb.append(", statsConcededFtMatches=").append(statsConcededFtMatches);
        sb.append(", statsConcededFthomeTotal=").append(statsConcededFthomeTotal);
        sb.append(", statsConcededFthomeAverage=").append(statsConcededFthomeAverage);
        sb.append(", statsConcededFthomeCleansheets=").append(statsConcededFthomeCleansheets);
        sb.append(", statsConcededFthomeMatches=").append(statsConcededFthomeMatches);
        sb.append(", statsConcededFtawayTotal=").append(statsConcededFtawayTotal);
        sb.append(", statsConcededFtawayAverage=").append(statsConcededFtawayAverage);
        sb.append(", statsConcededFtawayCleansheets=").append(statsConcededFtawayCleansheets);
        sb.append(", statsConcededFtawayMatches=").append(statsConcededFtawayMatches);
        sb.append(", statsConcededP1Total=").append(statsConcededP1Total);
        sb.append(", statsConcededP1Average=").append(statsConcededP1Average);
        sb.append(", statsConcededP1Cleansheets=").append(statsConcededP1Cleansheets);
        sb.append(", statsConcededP1Matches=").append(statsConcededP1Matches);
        sb.append(", statsConcededP1homeTotal=").append(statsConcededP1homeTotal);
        sb.append(", statsConcededP1homeAverage=").append(statsConcededP1homeAverage);
        sb.append(", statsConcededP1homeCleansheets=").append(statsConcededP1homeCleansheets);
        sb.append(", statsConcededP1homeMatches=").append(statsConcededP1homeMatches);
        sb.append(", statsConcededP1awayTotal=").append(statsConcededP1awayTotal);
        sb.append(", statsConcededP1awayAverage=").append(statsConcededP1awayAverage);
        sb.append(", statsConcededP1awayCleansheets=").append(statsConcededP1awayCleansheets);
        sb.append(", statsConcededP1awayMatches=").append(statsConcededP1awayMatches);
        sb.append(", statsConcededP2Total=").append(statsConcededP2Total);
        sb.append(", statsConcededP2Average=").append(statsConcededP2Average);
        sb.append(", statsConcededP2Cleansheets=").append(statsConcededP2Cleansheets);
        sb.append(", statsConcededP2Matches=").append(statsConcededP2Matches);
        sb.append(", statsConcededP2homeTotal=").append(statsConcededP2homeTotal);
        sb.append(", statsConcededP2homeAverage=").append(statsConcededP2homeAverage);
        sb.append(", statsConcededP2homeCleansheets=").append(statsConcededP2homeCleansheets);
        sb.append(", statsConcededP2homeMatches=").append(statsConcededP2homeMatches);
        sb.append(", statsConcededP2awayTotal=").append(statsConcededP2awayTotal);
        sb.append(", statsConcededP2awayAverage=").append(statsConcededP2awayAverage);
        sb.append(", statsConcededP2awayCleansheets=").append(statsConcededP2awayCleansheets);
        sb.append(", statsConcededP2awayMatches=").append(statsConcededP2awayMatches);
        sb.append(", statsTotalFt05Over=").append(statsTotalFt05Over);
        sb.append(", statsTotalFt05Under=").append(statsTotalFt05Under);
        sb.append(", statsTotalFt15Over=").append(statsTotalFt15Over);
        sb.append(", statsTotalFt15Under=").append(statsTotalFt15Under);
        sb.append(", statsTotalFt25Over=").append(statsTotalFt25Over);
        sb.append(", statsTotalFt25Under=").append(statsTotalFt25Under);
        sb.append(", statsTotalFt35Over=").append(statsTotalFt35Over);
        sb.append(", statsTotalFt35Under=").append(statsTotalFt35Under);
        sb.append(", statsTotalFt45Over=").append(statsTotalFt45Over);
        sb.append(", statsTotalFt45Under=").append(statsTotalFt45Under);
        sb.append(", statsTotalFt55Over=").append(statsTotalFt55Over);
        sb.append(", statsTotalFt55Under=").append(statsTotalFt55Under);
        sb.append(", statsTotalP105Over=").append(statsTotalP105Over);
        sb.append(", statsTotalP105Under=").append(statsTotalP105Under);
        sb.append(", statsTotalP115Over=").append(statsTotalP115Over);
        sb.append(", statsTotalP115Under=").append(statsTotalP115Under);
        sb.append(", statsTotalP125Over=").append(statsTotalP125Over);
        sb.append(", statsTotalP125Under=").append(statsTotalP125Under);
        sb.append(", statsTotalP135Over=").append(statsTotalP135Over);
        sb.append(", statsTotalP135Under=").append(statsTotalP135Under);
        sb.append(", statsTotalP145Over=").append(statsTotalP145Over);
        sb.append(", statsTotalP145Under=").append(statsTotalP145Under);
        sb.append(", statsTotalP155Over=").append(statsTotalP155Over);
        sb.append(", statsTotalP155Under=").append(statsTotalP155Under);
        sb.append(", statsTotalP205Over=").append(statsTotalP205Over);
        sb.append(", statsTotalP205Under=").append(statsTotalP205Under);
        sb.append(", statsTotalP215Over=").append(statsTotalP215Over);
        sb.append(", statsTotalP215Under=").append(statsTotalP215Under);
        sb.append(", statsTotalP225Over=").append(statsTotalP225Over);
        sb.append(", statsTotalP225Under=").append(statsTotalP225Under);
        sb.append(", statsTotalP235Over=").append(statsTotalP235Over);
        sb.append(", statsTotalP235Under=").append(statsTotalP235Under);
        sb.append(", statsTotalP245Over=").append(statsTotalP245Over);
        sb.append(", statsTotalP245Under=").append(statsTotalP245Under);
        sb.append(", statsTotalP255Over=").append(statsTotalP255Over);
        sb.append(", statsTotalP255Under=").append(statsTotalP255Under);
        sb.append(", statsHomeFt05Over=").append(statsHomeFt05Over);
        sb.append(", statsHomeFt05Under=").append(statsHomeFt05Under);
        sb.append(", statsHomeFt15Over=").append(statsHomeFt15Over);
        sb.append(", statsHomeFt15Under=").append(statsHomeFt15Under);
        sb.append(", statsHomeFt25Over=").append(statsHomeFt25Over);
        sb.append(", statsHomeFt25Under=").append(statsHomeFt25Under);
        sb.append(", statsHomeFt35Over=").append(statsHomeFt35Over);
        sb.append(", statsHomeFt35Under=").append(statsHomeFt35Under);
        sb.append(", statsHomeFt45Over=").append(statsHomeFt45Over);
        sb.append(", statsHomeFt45Under=").append(statsHomeFt45Under);
        sb.append(", statsHomeFt55Over=").append(statsHomeFt55Over);
        sb.append(", statsHomeFt55Under=").append(statsHomeFt55Under);
        sb.append(", statsHomeP105Over=").append(statsHomeP105Over);
        sb.append(", statsHomeP105Under=").append(statsHomeP105Under);
        sb.append(", statsHomeP115Over=").append(statsHomeP115Over);
        sb.append(", statsHomeP115Under=").append(statsHomeP115Under);
        sb.append(", statsHomeP125Over=").append(statsHomeP125Over);
        sb.append(", statsHomeP125Under=").append(statsHomeP125Under);
        sb.append(", statsHomeP135Over=").append(statsHomeP135Over);
        sb.append(", statsHomeP135Under=").append(statsHomeP135Under);
        sb.append(", statsHomeP145Over=").append(statsHomeP145Over);
        sb.append(", statsHomeP145Under=").append(statsHomeP145Under);
        sb.append(", statsHomeP155Over=").append(statsHomeP155Over);
        sb.append(", statsHomeP155Under=").append(statsHomeP155Under);
        sb.append(", statsHomeP205Over=").append(statsHomeP205Over);
        sb.append(", statsHomeP205Under=").append(statsHomeP205Under);
        sb.append(", statsHomeP215Over=").append(statsHomeP215Over);
        sb.append(", statsHomeP215Under=").append(statsHomeP215Under);
        sb.append(", statsHomeP225Over=").append(statsHomeP225Over);
        sb.append(", statsHomeP225Under=").append(statsHomeP225Under);
        sb.append(", statsHomeP235Over=").append(statsHomeP235Over);
        sb.append(", statsHomeP235Under=").append(statsHomeP235Under);
        sb.append(", statsHomeP245Over=").append(statsHomeP245Over);
        sb.append(", statsHomeP245Under=").append(statsHomeP245Under);
        sb.append(", statsHomeP255Over=").append(statsHomeP255Over);
        sb.append(", statsHomeP255Under=").append(statsHomeP255Under);
        sb.append(", statsAwayFt05Over=").append(statsAwayFt05Over);
        sb.append(", statsAwayFt05Under=").append(statsAwayFt05Under);
        sb.append(", statsAwayFt15Over=").append(statsAwayFt15Over);
        sb.append(", statsAwayFt15Under=").append(statsAwayFt15Under);
        sb.append(", statsAwayFt25Over=").append(statsAwayFt25Over);
        sb.append(", statsAwayFt25Under=").append(statsAwayFt25Under);
        sb.append(", statsAwayFt35Over=").append(statsAwayFt35Over);
        sb.append(", statsAwayFt35Under=").append(statsAwayFt35Under);
        sb.append(", statsAwayFt45Over=").append(statsAwayFt45Over);
        sb.append(", statsAwayFt45Under=").append(statsAwayFt45Under);
        sb.append(", statsAwayFt55Over=").append(statsAwayFt55Over);
        sb.append(", statsAwayFt55Under=").append(statsAwayFt55Under);
        sb.append(", statsAwayP105Over=").append(statsAwayP105Over);
        sb.append(", statsAwayP105Under=").append(statsAwayP105Under);
        sb.append(", statsAwayP115Over=").append(statsAwayP115Over);
        sb.append(", statsAwayP115Under=").append(statsAwayP115Under);
        sb.append(", statsAwayP125Over=").append(statsAwayP125Over);
        sb.append(", statsAwayP125Under=").append(statsAwayP125Under);
        sb.append(", statsAwayP135Over=").append(statsAwayP135Over);
        sb.append(", statsAwayP135Under=").append(statsAwayP135Under);
        sb.append(", statsAwayP145Over=").append(statsAwayP145Over);
        sb.append(", statsAwayP145Under=").append(statsAwayP145Under);
        sb.append(", statsAwayP155Over=").append(statsAwayP155Over);
        sb.append(", statsAwayP155Under=").append(statsAwayP155Under);
        sb.append(", statsAwayP205Over=").append(statsAwayP205Over);
        sb.append(", statsAwayP205Under=").append(statsAwayP205Under);
        sb.append(", statsAwayP215Over=").append(statsAwayP215Over);
        sb.append(", statsAwayP215Under=").append(statsAwayP215Under);
        sb.append(", statsAwayP225Over=").append(statsAwayP225Over);
        sb.append(", statsAwayP225Under=").append(statsAwayP225Under);
        sb.append(", statsAwayP235Over=").append(statsAwayP235Over);
        sb.append(", statsAwayP235Under=").append(statsAwayP235Under);
        sb.append(", statsAwayP245Over=").append(statsAwayP245Over);
        sb.append(", statsAwayP245Under=").append(statsAwayP245Under);
        sb.append(", statsAwayP255Over=").append(statsAwayP255Over);
        sb.append(", statsAwayP255Under=").append(statsAwayP255Under);
        sb.append('}');
        return sb.toString();
    }
}
